{"version":3,"sources":["components/Header.js","components/TableForm.js","components/TableViewer.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","TableForm","props","handleChange","event","target","name","value","setState","state","loaded","tables","selectedTable","fetch","then","res","json","data","selectOptions","this","map","table","key","id","tableSelect","Form","Group","as","Row","controlId","Label","column","sm","Col","lg","Control","onChange","className","onSubmit","preventDefault","Button","type","Component","TableViewer","contentLoaded","tableContent","match","params","tableName","columnNames","Object","getOwnPropertyNames","col","contentRows","row","rows","values","cell","Table","striped","bordered","hover","style","captionSide","Main","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef4dc4f5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header() {\n    return (\n        <header>\n                <p>\n                    <Link to={\"/\"}>SQL Table Viewer</Link>\n                </p>\n        </header>\n    );\n}\n\nexport default Header;","import React, {Component} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\"\n\nclass TableForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            tables: [],\n            selectedTable: \"\"\n        }\n    }\n\n\n    componentDidMount() {\n        fetch(\"https://sql-tables.herokuapp.com/api/tables\")\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    loaded: true,\n                    tables: data,\n                    selectedTable: data[0].name\n                });\n            });\n    }\n\n    handleChange = (event) => {\n        const {name, value} = event.target;\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        const selectOptions = this\n            .state\n            .tables\n            .map(table => <option key={table.id} value={table.name}>{table.name}</option>)\n\n        const tableSelect = (\n            <Form.Group as={Row} controlId=\"formSelectTable\">\n                <Form.Label column sm={2}>Select table to be shown: </Form.Label>\n                <Col sm={4} lg={2}>\n                    <Form.Control\n                        as=\"select\"\n                        name=\"selectedTable\"\n                        value={this.state.selectedTable}\n                        onChange={this.handleChange}\n                    >\n                        {selectOptions}\n                    </Form.Control>\n                </Col>\n            </Form.Group>\n        );\n\n\n\n        return (\n            <div className=\"basic-spacing\">\n                {\n                    this.state.loaded ?\n                        <Form onSubmit={event => event.preventDefault()} id=\"form-table\">\n                            {tableSelect}\n                            <Link to={`/tables/${this.state.selectedTable}`}>\n                                <Button type=\"submit\">Show table</Button>\n                            </Link>\n                        </Form>\n                        :\n                        <div>\n                            Loading table names...\n                        </div>\n                }\n            </div>\n        );\n    }\n\n}\n\nexport default TableForm;","import React, {Component} from \"react\";\nimport Table from \"react-bootstrap/Table\";\n\nclass TableViewer extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            contentLoaded: false,\n            tableContent: []\n        }\n    }\n\n    componentDidMount() {\n        fetch(`https://sql-tables.herokuapp.com/api/${this.props.match.params.tableName}`)\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    contentLoaded: true,\n                    tableContent: data\n                });\n            });\n    }\n\n    render() {\n        if(this.state.contentLoaded) {\n            const columns = Object.getOwnPropertyNames(this.state.tableContent[0]);\n            const columnNames = columns.map(col => <th>{col}</th>);  // Head row\n\n            const contentRows = this.state.tableContent.map(row => {    // All content rows\n                const rows = Object.values(row).map(cell => <td>{cell}</td>)    // Cells for each content row\n                return <tr key={row.id} >{rows}</tr>;\n            });\n\n            return (\n                <div className=\"basic-spacing\">\n                    <Table striped bordered hover>\n                        <caption style={{captionSide: \"top\"}}>{this.state.selectedTable}</caption>\n                        <thead>\n                        <tr>\n                            {columnNames}\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {contentRows}\n                        </tbody>\n                    </Table>\n                </div>\n            );\n        } else {\n            return <div>Loading content...</div>\n        }\n    }\n\n}\n\nexport default TableViewer;","import React, {Component} from \"react\";\nimport TableForm from \"./TableForm\";\nimport TableViewer from \"./TableViewer\";\nimport { Route } from \"react-router-dom\";\n\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            tables: [],\n            selectedTable: \"\"\n        };\n    }\n\n\n    render() {\n        return (\n            <main>\n                <Route exact={true} path={\"/\"} component={TableForm} />\n                <Route path={\"/tables/:tableName\"} component={TableViewer} />\n            </main>\n        );\n    }\n}\n\nexport default Main;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./style/style.css\"\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <div>\n            <Router>\n                <Header />\n                <Main />\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}