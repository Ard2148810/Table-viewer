{"version":3,"sources":["components/Header.js","components/TableForm.js","components/TableRow.js","components/AddTableRow.js","components/TableViewer.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","to","TableForm","props","handleChange","event","target","name","value","setState","state","loaded","tables","selectedTable","fetch","then","res","json","data","selectOptions","this","map","table","key","id","tableSelect","Form","Group","as","Row","controlId","Label","column","sm","Col","lg","Control","onChange","className","onSubmit","preventDefault","Button","type","Component","TableRow","toggleEditing","isEditing","resetValues","defaultValues","oldState","columns","Object","keys","cells","values","cell","index","size","toString","length","onValueChanged","leftButton","variant","style","padding","paddingLeft","paddingRight","onClick","onUpdate","rightButton","marginLeft","onDelete","AddTableRow","newObjectFromKeys","object","newObject","forEach","toggleAddingRow","onAddClicked","TableViewer","stompClient","fetchTableData","url","contentLoaded","tableContent","websocketConnection","subscription","socket","SockJS","Stomp","connect","subscribe","msg","addRow","JSON","parse","body","deleteRow","updateRow","newRow","concat","updatedRow","findIndex","row","splice","isAddingNewRow","send","match","params","tableName","stringify","onDeleteClicked","onUpdateClicked","find","onCellChange","rowId","columnNames","getOwnPropertyNames","col","contentRows","Table","striped","hover","captionSide","Main","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0LAaeA,MAVf,WACI,OACI,gCACQ,2BACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,uB,wEC4ELC,E,kDA1EX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAqBVC,aAAe,SAACC,GAAW,IAAD,EACAA,EAAMC,OAArBC,EADe,EACfA,KAAMC,EADS,EACTA,MACb,EAAKC,SAAL,eACKF,EAAOC,KAvBZ,EAAKE,MAAQ,CACTC,QAAQ,EACRC,OAAQ,GACRC,cAAe,IALJ,E,gEAUE,IAAD,OAChBC,MAAM,oCACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,EAAKT,SAAS,CACVE,QAAQ,EACRC,OAAQM,EACRL,cAAeK,EAAK,GAAGX,Y,+BAanC,IAAMY,EAAgBC,KACjBV,MACAE,OACAS,KAAI,SAAAC,GAAK,OAAI,4BAAQC,IAAKD,EAAME,GAAIhB,MAAOc,EAAMf,MAAOe,EAAMf,SAE7DkB,EACF,kBAACC,EAAA,EAAKC,MAAN,CAAYC,GAAIC,IAAKC,UAAU,mBAC3B,kBAACJ,EAAA,EAAKK,MAAN,CAAYC,QAAM,EAACC,GAAI,GAAvB,8BACA,kBAACC,EAAA,EAAD,CAAKD,GAAI,EAAGE,GAAI,GACZ,kBAACT,EAAA,EAAKU,QAAN,CACIR,GAAG,SACHrB,KAAK,gBACLC,MAAOY,KAAKV,MAAMG,cAClBwB,SAAUjB,KAAKhB,cAEde,KAQjB,OACI,yBAAKmB,UAAU,iBAEPlB,KAAKV,MAAMC,OACP,kBAACe,EAAA,EAAD,CAAMa,SAAU,SAAAlC,GAAK,OAAIA,EAAMmC,kBAAkBhB,GAAG,cAC/CC,EACD,kBAAC,IAAD,CAAMxB,GAAE,kBAAamB,KAAKV,MAAMG,gBAC5B,kBAAC4B,EAAA,EAAD,CAAQC,KAAK,UAAb,gBAIR,4D,GAlEAC,a,gCCqFTC,E,kDAvFX,WAAYzC,GAAQ,IAAD,8BACf,cAAMA,IAOV0C,cAAgB,WACT,EAAKnC,MAAMoC,WACV,EAAK3C,MAAM4C,YAAY,EAAKrC,MAAMsC,eAEtC,EAAKvC,UAAS,SAACwC,GACX,MAAO,CACHH,WAAYG,EAASH,eAZ7B,EAAKpC,MAAQ,CACToC,WAAW,EACXE,cAAe,EAAK7C,MAAMe,MAJf,E,qDAmBT,IAAD,OACCA,EAAOE,KAAKjB,MAAMe,KAClBgC,EAAUC,OAAOC,KAAKhC,KAAKjB,MAAMe,MACjCmC,EAAQF,OAAOG,OAAOpC,GAAMG,KAAI,SAACkC,EAAMC,GACzC,OAAO,EAAK9C,MAAMoC,UACd,wBAAIvB,IAAKiC,GACL,2BAAOhD,MAAO+C,EACPhD,KAAM2C,EAAQM,GACdC,KAAe,OAATF,GAA4C,IAA3BA,EAAKG,WAAWC,OAAe,EAAIJ,EAAKG,WAAWC,OAC1EtB,SAAU,SAAChC,GAAD,OAAW,EAAKF,MAAMyD,eAAevD,EAAOa,EAAKM,QAItE,wBAAID,IAAKiC,GAAQD,MAEnBM,EAAazC,KAAKV,MAAMoC,UAC1B,kBAACL,EAAA,EAAD,CAAQqB,QAAQ,UACRL,KAAK,KACLM,MAAO,CAACC,QAAS,MAAOC,YAAa,MAAOC,aAAc,OAC1DC,QAAU,SAAA9D,GACNA,EAAMmC,iBACN,EAAK/B,SAAS,CAACqC,WAAW,IAC1B,EAAK3C,MAAMiE,SAASlD,EAAKM,MANrC,QAaA,kBAACiB,EAAA,EAAD,CAAQqB,QAAQ,kBACRL,KAAK,KACLM,MAAO,CAACC,QAAS,MAAOC,YAAa,MAAOC,aAAc,OAC1DC,QAAS/C,KAAKyB,eAHtB,QAOEwB,EAAcjD,KAAKV,MAAMoC,UAC3B,kBAACL,EAAA,EAAD,CAAQqB,QAAQ,YACRL,KAAK,KACLM,MAAO,CAACC,QAAS,MAAOC,YAAa,MAAOC,aAAc,MAAOI,WAAY,OAC7EH,QAAS/C,KAAKyB,eAHtB,UAQA,kBAACJ,EAAA,EAAD,CAAQqB,QAAQ,iBACRL,KAAK,KACLM,MAAO,CAACC,QAAS,MAAOC,YAAa,MAAOC,aAAc,MAAOI,WAAY,OAC7EH,QAAS,kBAAM,EAAKhE,MAAMoE,SAASrD,EAAKM,MAHhD,UASJ,OACI,4BACK6B,EACD,4BACA,8BACKQ,EACAQ,S,GAjFE1B,aCkER6B,E,kDAhEX,WAAYrE,GAAQ,IAAD,8BACf,cAAMA,IAMVsE,kBAAoB,SAACC,GACjB,IAAIC,EAAY,GAEhB,OADAxB,OAAOC,KAAKsB,GAAQE,SAAQ,SAAArD,GAASoD,EAAUpD,GAAO,MAC/CoD,GAVQ,EAanBtC,SAAW,SAAChC,GAAW,IAAD,EACIA,EAAMC,OAArBC,EADW,EACXA,KAAMC,EADK,EACLA,MACb,EAAKC,UAAS,SAAAwC,GAEV,OADAA,EAAS/B,KAAKX,GAAQC,EACfyC,MAfX,EAAKvC,MAAQ,CACTQ,KAAM,EAAKuD,kBAAkB,EAAKtE,MAAMkD,QAH7B,E,qDAqBT,IAAD,OACCA,EAAQF,OAAOC,KAAKhC,KAAKV,MAAMQ,MAAMG,KACvC,SAAAd,GAAI,OAAI,4BACJ,2BACIkD,KAAM,EAAK/C,MAAMQ,KAAKX,GAAMoD,QAAU,EACtCpD,KAAMA,EACN8B,SAAU,EAAKA,SACf7B,MAAO,EAAKE,MAAMQ,KAAKX,SAG7BsD,EACF,kBAACpB,EAAA,EAAD,CAAQqB,QAAQ,UACRL,KAAK,KACLM,MAAO,CAACC,QAAS,MAAOC,YAAa,MAAOC,aAAc,OAC1DC,QAAS,SAAC9D,GACNA,EAAMmC,iBACN,EAAKrC,MAAM0E,kBACX,EAAK1E,MAAM2E,aAAa,EAAKpE,MAAMQ,QAN/C,QAWEmD,EACF,kBAAC5B,EAAA,EAAD,CAAQqB,QAAQ,YACRL,KAAK,KACLM,MAAO,CAACC,QAAS,MAAOC,YAAa,MAAOC,aAAc,MAAOI,WAAY,OAC7EH,QAAS/C,KAAKjB,MAAM0E,iBAH5B,UAOJ,OACI,4BACKxB,EACD,4BACKQ,EACAQ,Q,GA1DK1B,aCoKXoC,E,kDA1JX,WAAY5E,GAAQ,IAAD,8BACf,cAAMA,IAHV6E,YAAc,KAEK,EAiBnBC,eAAiB,SAACC,GACdpE,MAAMoE,GACDnE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACF,EAAKT,SAAS,CACV0E,eAAe,EACfC,aAAclE,QAvBX,EA4BnBmE,oBAAsB,SAACH,EAAKI,GACxB,IAAIC,EAAS,IAAIC,EAAON,GACxB,EAAKF,YAAcS,OAAWF,GAC9B,EAAKP,YAAYU,QAAQ,IAAI,WAEzB,EAAKV,YAAYW,UAAjB,UAA8BL,EAA9B,SAAkD,SAACM,GAAD,OAAS,EAAKC,OAAOC,KAAKC,MAAMH,EAAII,UACtF,EAAKhB,YAAYW,UAAjB,UAA8BL,EAA9B,iBAA0D,SAACM,GAAD,OAAS,EAAKK,UAAUH,KAAKC,MAAMH,EAAII,UACjG,EAAKhB,YAAYW,UAAjB,UAA8BL,EAA9B,iBAA0D,SAACM,GAAD,OAAS,EAAKM,UAAUJ,KAAKC,MAAMH,EAAII,cAnCtF,EAuCnBH,OAAS,SAACM,GACN,EAAK1F,UAAS,SAACwC,GAEX,MAAO,CAACmC,aADWnC,EAASmC,aAAagB,OAAOD,QAzCrC,EA8CnBD,UAAY,SAACG,GACT,EAAK5F,UAAS,SAACwC,GACX,IAAMO,EAAQP,EAASmC,aAAakB,WAAU,SAACC,GAAD,OAASA,EAAI/E,KAAO6E,EAAW7E,MAE7E,OADAyB,EAASmC,aAAa5B,GAAS6C,EACxB,CAACjB,aAAcnC,EAASmC,kBAlDpB,EAsDnBa,UAAY,SAACzE,GACT,EAAKf,UAAS,SAACwC,GACX,IAAMO,EAAQP,EAASmC,aAAakB,WAAU,SAACC,GAAD,OAASA,EAAI/E,KAAOA,KAElE,OADAyB,EAASmC,aAAaoB,OAAOhD,EAAO,GAC7B,CAAC4B,aAAcnC,EAASmC,kBA1DpB,EA8DnBP,gBAAkB,WACd,EAAKpE,UAAS,SAAAwC,GACV,MAAO,CAACwD,gBAAiBxD,EAASwD,oBAhEvB,EAoEnB3B,aAAe,SAACqB,GACZ,EAAKnB,YAAY0B,KAAjB,eAA8B,EAAKvG,MAAMwG,MAAMC,OAAOC,UAAtD,QAAuE,GAAIf,KAAKgB,UAAUX,KArE3E,EAwEnBY,gBAAkB,SAACvF,GACf,EAAKwD,YAAY0B,KAAjB,eAA8B,EAAKvG,MAAMwG,MAAMC,OAAOC,UAAtD,mBAA0ErF,GAAM,KAzEjE,EA4EnBwF,gBAAkB,SAACxF,GACf,EAAKwD,YAAY0B,KAAjB,eACY,EAAKvG,MAAMwG,MAAMC,OAAOC,UADpC,mBACwDrF,GACpD,GACAsE,KAAKgB,UAAU,EAAKpG,MAAM0E,aAAa6B,MAAK,SAAAV,GAAG,OAAIA,EAAI/E,KAAOA,QAhFnD,EAoFnB0F,aAAe,SAAC7G,EAAO8G,GAAW,IAAD,EACP9G,EAAMC,OAArBC,EADsB,EACtBA,KAAMC,EADgB,EAChBA,MACb,EAAKC,UAAS,SAACwC,GACX,IAAMO,EAAQP,EAASmC,aAAakB,WAAU,SAACC,GAAD,OAASA,EAAI/E,KAAO2F,KAC9DhB,EAASlD,EAASmC,aAAa5B,GAMnC,OALA2C,EAAM,2BACCA,GADD,kBAED5F,EAAOC,IAEZyC,EAASmC,aAAa5B,GAAS2C,EACxB,CAACf,aAAcnC,EAASmC,kBA5FnC,EAAK1E,MAAQ,CACTyE,eAAe,EACfC,aAAc,GACdqB,gBAAgB,GALL,E,gEAUf,IAAMI,EAAYzF,KAAKjB,MAAMwG,MAAMC,OAAOC,UAC1CzF,KAAK6D,eAAL,oCAAiD4B,IACjDzF,KAAKiE,oBACD,2BADJ,iBAEcwB,M,+BAoFR,IAAD,OACL,GAAGzF,KAAKV,MAAMyE,cAAe,CACzB,IACMiC,EADUjE,OAAOkE,oBAAoBjG,KAAKV,MAAM0E,aAAa,IACvC/D,KAAI,SAAAiG,GAAG,OAAI,4BAAKA,MACtCC,EAAcnG,KAAKV,MAAM0E,aAAa/D,KACxC,SAAAkF,GAAG,OAAI,kBAAC,EAAD,CAAUhF,IAAKgF,EAAI/E,GAAIN,KAAMqF,EAAKhC,SAAU,EAAKwC,gBAAiBnD,eAAgB,EAAKsD,aAAc9C,SAAU,EAAK4C,gBAAiBjE,YAAa,EAAKmD,eAGlK,OACI,yBAAK5D,UAAU,iBACX,6BACI,kBAAC,IAAD,CAAMrC,GAAI,KACN,kBAACwC,EAAA,EAAD,eAGR,kBAAC+E,EAAA,EAAD,CAAOC,SAAO,EAACC,OAAK,EAACpF,UAAU,wCAC3B,6BAASyB,MAAO,CAAC4D,YAAa,QAASvG,KAAKV,MAAMG,eAClD,+BACA,4BACKuG,IAGL,+BACKG,EAEGnG,KAAKV,MAAM+F,gBACX,kBAAC,EAAD,CAAapD,MAAOjC,KAAKV,MAAM0E,aAAa,GAC/BN,aAAc1D,KAAK0D,aACnBD,gBAAiBzD,KAAKyD,oBAK/C,6BACI,kBAACpC,EAAA,EAAD,CAAQ0B,QAAS/C,KAAKyD,iBAAtB,SAKZ,OACI,yBAAKvC,UAAU,iBACX,6BACI,kBAAC,IAAD,CAAMrC,GAAI,KACN,kBAACwC,EAAA,EAAD,eAGR,uBAAGH,UAAU,iBAAb,2B,GApJMK,a,OCiBXiF,E,kDAnBX,WAAYzH,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CACTC,QAAQ,EACRC,OAAQ,GACRC,cAAe,IALJ,E,qDAUf,OACI,8BACI,kBAAC,IAAD,CAAOgH,OAAO,EAAMC,KAAM,IAAKC,UAAW7H,IAC1C,kBAAC,IAAD,CAAO2H,OAAO,EAAMC,KAAM,qBAAsBC,UAAWhD,S,GAfxDpC,aCaJqF,MAXf,WACI,OACI,6BACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,SCAIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCbN0B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5H,MAAK,SAAA6H,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.7ab211f5.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header() {\n    return (\n        <header>\n                <p>\n                    <Link to=\"/\">SQL Table Viewer</Link>\n                </p>\n        </header>\n    );\n}\n\nexport default Header;","import React, {Component} from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport { Link } from \"react-router-dom\"\n\nclass TableForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            tables: [],\n            selectedTable: \"\"\n        }\n    }\n\n\n    componentDidMount() {\n        fetch(\"http://localhost:8080/api/tables\")\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    loaded: true,\n                    tables: data,\n                    selectedTable: data[0].name\n                });\n            });\n    }\n\n    handleChange = (event) => {\n        const {name, value} = event.target;\n        this.setState({\n            [name]: value\n        });\n    }\n\n    render() {\n        const selectOptions = this\n            .state\n            .tables\n            .map(table => <option key={table.id} value={table.name}>{table.name}</option>)\n\n        const tableSelect = (\n            <Form.Group as={Row} controlId=\"formSelectTable\">\n                <Form.Label column sm={2}>Select table to be shown: </Form.Label>\n                <Col sm={4} lg={2}>\n                    <Form.Control\n                        as=\"select\"\n                        name=\"selectedTable\"\n                        value={this.state.selectedTable}\n                        onChange={this.handleChange}\n                    >\n                        {selectOptions}\n                    </Form.Control>\n                </Col>\n            </Form.Group>\n        );\n\n\n\n        return (\n            <div className=\"basic-spacing\">\n                {\n                    this.state.loaded ?\n                        <Form onSubmit={event => event.preventDefault()} id=\"form-table\">\n                            {tableSelect}\n                            <Link to={`/tables/${this.state.selectedTable}`}>\n                                <Button type=\"submit\">Show table</Button>\n                            </Link>\n                        </Form>\n                        :\n                        <div>\n                            Loading table names...\n                        </div>\n                }\n            </div>\n        );\n    }\n\n}\n\nexport default TableForm;","import React, {Component} from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nclass TableRow extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            defaultValues: this.props.data\n        }\n    }\n\n    toggleEditing = () => {\n        if(this.state.isEditing) { // Reset values when editing is canceled\n            this.props.resetValues(this.state.defaultValues);\n        }\n        this.setState((oldState) => {\n            return {\n                isEditing: !oldState.isEditing,\n            };\n        });\n    }\n\n    render() {\n        const data = this.props.data;\n        const columns = Object.keys(this.props.data);\n        const cells = Object.values(data).map((cell, index) => {\n            return this.state.isEditing ?\n                <td key={index}>\n                    <input value={cell}\n                           name={columns[index]}\n                           size={cell === null || cell.toString().length === 0 ? 1 : cell.toString().length}\n                           onChange={(event) => this.props.onValueChanged(event, data.id)}\n                    />\n                </td>\n                :\n                <td key={index}>{cell}</td>\n        })\n        const leftButton = this.state.isEditing ?\n            <Button variant=\"success\"\n                    size=\"sm\"\n                    style={{padding: \"3px\", paddingLeft: \"8px\", paddingRight: \"8px\"}}\n                    onClick={(event => {\n                        event.preventDefault();\n                        this.setState({isEditing: false});\n                        this.props.onUpdate(data.id);\n                        })\n                    }\n            >\n                Send\n            </Button>\n            :\n            <Button variant=\"outline-primary\"\n                    size=\"sm\"\n                    style={{padding: \"3px\", paddingLeft: \"8px\", paddingRight: \"8px\"}}\n                    onClick={this.toggleEditing}\n            >\n                Edit\n            </Button>\n        const rightButton = this.state.isEditing ?\n            <Button variant=\"secondary\"\n                    size=\"sm\"\n                    style={{padding: \"3px\", paddingLeft: \"8px\", paddingRight: \"8px\", marginLeft: \"3px\"}}\n                    onClick={this.toggleEditing}\n            >\n                Cancel\n            </Button>\n            :\n            <Button variant=\"outline-danger\"\n                    size=\"sm\"\n                    style={{padding: \"3px\", paddingLeft: \"8px\", paddingRight: \"8px\", marginLeft: \"3px\"}}\n                    onClick={() => this.props.onDelete(data.id)}\n            >\n                Delete\n            </Button>\n\n\n        return (\n            <tr>\n                {cells}\n                <td>\n                <span>\n                    {leftButton}\n                    {rightButton}\n                </span>\n                </td>\n            </tr>);\n    }\n\n}\n\nexport default TableRow;","import React, {Component} from \"react\";\nimport {Button} from \"react-bootstrap\";\n\nclass AddTableRow extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            data: this.newObjectFromKeys(this.props.cells)\n        }\n    }\n\n    newObjectFromKeys = (object) => {\n        let newObject = {}\n        Object.keys(object).forEach(key => { newObject[key] = \"\" });\n        return newObject;\n    }\n\n    onChange = (event) => {\n        const {name, value} = event.target;\n        this.setState(oldState => {\n            oldState.data[name] = value;\n            return oldState;\n        })\n    }\n\n    render() {\n        const cells = Object.keys(this.state.data).map(\n            name => <td>\n                <input\n                    size={this.state.data[name].length || 1}\n                    name={name}\n                    onChange={this.onChange}\n                    value={this.state.data[name]}\n                />\n            </td>)\n        const leftButton =\n            <Button variant=\"success\"\n                    size=\"sm\"\n                    style={{padding: \"3px\", paddingLeft: \"8px\", paddingRight: \"8px\"}}\n                    onClick={(event) => {\n                        event.preventDefault();\n                        this.props.toggleAddingRow();\n                        this.props.onAddClicked(this.state.data);\n                    }}\n            >\n                Send\n            </Button>\n        const rightButton =\n            <Button variant=\"secondary\"\n                    size=\"sm\"\n                    style={{padding: \"3px\", paddingLeft: \"8px\", paddingRight: \"8px\", marginLeft: \"3px\"}}\n                    onClick={this.props.toggleAddingRow}\n            >\n                Cancel\n            </Button>\n        return (\n            <tr>\n                {cells}\n                <td>\n                    {leftButton}\n                    {rightButton}\n                </td>\n            </tr>\n        );\n    }\n\n}\n\nexport default AddTableRow;","import React, {Component} from \"react\";\nimport Table from \"react-bootstrap/Table\";\nimport {Link} from \"react-router-dom\";\nimport {Button} from \"react-bootstrap\";\nimport * as SockJS from \"sockjs-client\";\nimport * as Stomp from \"stompjs\";\nimport TableRow from \"./TableRow\";\nimport AddTableRow from \"./AddTableRow\";\n\nclass TableViewer extends Component {\n\n    stompClient = null;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            contentLoaded: false,\n            tableContent: [],\n            isAddingNewRow: false\n        }\n    }\n\n    componentDidMount() {\n        const tableName = this.props.match.params.tableName;\n        this.fetchTableData(`http://localhost:8080/api/${tableName}`);\n        this.websocketConnection(\n            'http://localhost:8080/ws',\n            `/topic/${tableName}`);\n    }\n\n    fetchTableData = (url) => {\n        fetch(url)\n            .then(res => res.json())\n            .then(data => {\n                this.setState({\n                    contentLoaded: true,\n                    tableContent: data\n                });\n            });\n    }\n\n    websocketConnection = (url, subscription) => {\n        let socket = new SockJS(url);\n        this.stompClient = Stomp.over(socket);\n        this.stompClient.connect({}, () => {\n            // Delegate actions to adequate methods\n            this.stompClient.subscribe(`${subscription}/add`, (msg) => this.addRow(JSON.parse(msg.body)));\n            this.stompClient.subscribe(`${subscription}/delete/{id}`, (msg) => this.deleteRow(JSON.parse(msg.body)));\n            this.stompClient.subscribe(`${subscription}/update/{id}`, (msg) => this.updateRow(JSON.parse(msg.body)));\n        });\n    }\n\n    addRow = (newRow) => {\n        this.setState((oldState) => {\n            const newContent = oldState.tableContent.concat(newRow);\n            return {tableContent: newContent};\n        })\n    }\n\n    updateRow = (updatedRow) => {\n        this.setState((oldState) => {\n            const index = oldState.tableContent.findIndex((row) => row.id === updatedRow.id);   // TODO: Handle index not found situation\n            oldState.tableContent[index] = updatedRow;\n            return {tableContent: oldState.tableContent};\n        })\n    }\n\n    deleteRow = (id) => {\n        this.setState((oldState) => {\n            const index = oldState.tableContent.findIndex((row) => row.id === id);\n            oldState.tableContent.splice(index, 1);\n            return {tableContent: oldState.tableContent};\n        })\n    }\n\n    toggleAddingRow = () => {\n        this.setState(oldState => {\n            return {isAddingNewRow: !oldState.isAddingNewRow}\n        });\n    }\n\n    onAddClicked = (newRow) => {\n        this.stompClient.send(`/app/${this.props.match.params.tableName}/add`, {}, JSON.stringify(newRow));\n    }\n\n    onDeleteClicked = (id) => {\n        this.stompClient.send(`/app/${this.props.match.params.tableName}/delete/${id}`, {});\n    }\n\n    onUpdateClicked = (id) => {\n        this.stompClient.send(\n            `/app/${this.props.match.params.tableName}/update/${id}`,\n            {},\n            JSON.stringify(this.state.tableContent.find(row => row.id === id))\n        );\n    }\n\n    onCellChange = (event, rowId) => {\n        const {name, value} = event.target;\n        this.setState((oldState) => {\n            const index = oldState.tableContent.findIndex((row) => row.id === rowId);\n            let newRow = oldState.tableContent[index];\n            newRow = {\n                ...newRow,\n                [name]: value\n            }\n            oldState.tableContent[index] = newRow;\n            return {tableContent: oldState.tableContent};\n        })\n    }\n\n    render() {\n        if(this.state.contentLoaded) {\n            const columns = Object.getOwnPropertyNames(this.state.tableContent[0]);\n            const columnNames = columns.map(col => <th>{col}</th>);  // Head row\n            const contentRows = this.state.tableContent.map(\n                row => <TableRow key={row.id} data={row} onDelete={this.onDeleteClicked} onValueChanged={this.onCellChange} onUpdate={this.onUpdateClicked} resetValues={this.updateRow}/>\n                );\n\n            return (\n                <div className=\"basic-spacing\">\n                    <div>\n                        <Link to={\"/\"}>\n                            <Button>Back</Button>\n                        </Link>\n                    </div>\n                    <Table striped hover className=\"last-clear border-side show-on-hover\">\n                        <caption style={{captionSide: \"top\"}}>{this.state.selectedTable}</caption>\n                        <thead>\n                        <tr>\n                            {columnNames}\n                        </tr>\n                        </thead>\n                        <tbody>\n                            {contentRows}\n                            {\n                                this.state.isAddingNewRow &&\n                                <AddTableRow cells={this.state.tableContent[0]}\n                                             onAddClicked={this.onAddClicked}\n                                             toggleAddingRow={this.toggleAddingRow}\n                                />\n                            }\n                        </tbody>\n                    </Table>\n                    <div>\n                        <Button onClick={this.toggleAddingRow}>Add</Button>\n                    </div>\n                </div>\n            );\n        } else {\n            return (\n                <div className=\"basic-spacing\">\n                    <div>\n                        <Link to={\"/\"}>\n                            <Button>Back</Button>\n                        </Link>\n                    </div>\n                    <p className=\"basic-spacing\">\n                        Loading content...\n                    </p>\n                </div>\n            );\n        }\n    }\n\n}\n\nexport default TableViewer;","import React, {Component} from \"react\";\nimport TableForm from \"./TableForm\";\nimport TableViewer from \"./TableViewer\";\nimport { Route } from \"react-router-dom\";\n\nclass Main extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loaded: false,\n            tables: [],\n            selectedTable: \"\"\n        };\n    }\n\n    render() {\n        return (\n            <main>\n                <Route exact={true} path={\"/\"} component={TableForm} />\n                <Route exact={true} path={\"/tables/:tableName\"} component={TableViewer} />\n            </main>\n        );\n    }\n}\n\nexport default Main;","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"./style/style.css\"\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nfunction App() {\n    return (\n        <div>\n            <Router>\n                <Header />\n                <Main />\n            </Router>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}